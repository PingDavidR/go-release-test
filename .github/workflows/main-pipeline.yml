name: Main Pipeline

on:
  pull_request:
    branches: [ main ]

jobs:
  agent-protection-check:
    name: Agent Protection Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for protected file modifications
        continue-on-error: true
        run: |
          VIOLATION=0
          if [ ! -f .noagent ]; then
            echo "::warning::.noagent configuration file not found. Cannot enforce agent protection rules."
            exit 1
          fi
          git fetch origin ${{ github.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD)
          PROTECTED_FILES=$(grep -v '^#' .noagent | grep -v '^$')
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_COMMITS=$(git log --format=%B origin/${{ github.base_ref }}..HEAD)
          if [[ "$PR_TITLE" == *"[HUMAN EDIT]"* ]] || [[ "$PR_BODY" == *"[HUMAN EDIT]"* ]]; then
            echo "Human edit override tag detected in PR. Skipping protected file checks."
            exit 0
          fi
          AI_PATTERN="automated by|copilot change|agent modification|\[bot\]|auto-generated|ai-assisted|generated by|created by ai|suggested by|co-authored by"
          if echo "$PR_COMMITS" | grep -iE "$AI_PATTERN" > /dev/null; then
            echo "Detected potentially automated commits. Checking for protected file modifications..."
            for file in $CHANGED_FILES; do
              for pattern in $PROTECTED_FILES; do
                if [[ "$file" == $pattern ]] || [[ "$file" == $(eval echo $pattern) ]]; then
                  echo "::warning::Protected file '$file' was modified in what appears to be an automated commit."
                  echo "Evidence: Commit message contains AI/bot-related terms"
                  VIOLATION=1
                  break
                fi
              done
            done
          fi
          if [[ "$VIOLATION" -eq 1 ]]; then
            echo "::warning::Protected files were modified by what appears to be an automated process."
            echo "::warning::If this is a legitimate human edit, please add [HUMAN EDIT] to your PR title or description."
            exit 1
          else
            echo "No evidence of automated modifications to protected files detected. Approved."
          fi

  verify-changelog:
    name: Verify Changelog Entry
    runs-on: ubuntu-latest
    needs: [agent-protection-check]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Check for changelog entry
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          CHANGELOG_FILE=".changelog/pr-${PR_NUMBER}.txt"
          if [ -f "$CHANGELOG_FILE" ]; then
            echo "Changelog file $CHANGELOG_FILE exists"
            DESCRIPTION=$(grep -v "^\`\`\`" "$CHANGELOG_FILE" | tr -d '\n')
            CHAR_COUNT=${#DESCRIPTION}
            if [ $CHAR_COUNT -gt 95 ]; then
              echo "::warning::Changelog description exceeds the 95-character limit ($CHAR_COUNT characters)."
              echo "Please edit $CHANGELOG_FILE and shorten the description to 95 characters or less."
            else
              echo "Changelog description is within the 95-character limit ($CHAR_COUNT characters)."
            fi
          else
            echo "::error::Changelog file $CHANGELOG_FILE does not exist. Please add a changelog entry for this PR."
            exit 1
          fi

  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: [verify-changelog]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Linting instructions
        run: |
          echo "Go linting is not enforced in CI. Please run 'make devcheck' locally before pushing."
      - name: Install shellcheck
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck
      - name: Run shellcheck
        run: |
          SCRIPTS=$(find . -name "*.sh" -type f | sort)
          for script in $SCRIPTS; do
            echo "Checking $script"
            shellcheck -x "$script" || exit 1
          done
      - name: Install shfmt
        run: |
          go install mvdan.cc/sh/v3/cmd/shfmt@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
      - name: Run shfmt
        run: |
          SCRIPTS=$(find . -name "*.sh" -type f | sort)
          for script in $SCRIPTS; do
            echo "Checking $script"
            shfmt -i 2 -ci -bn -s -d "$script" || exit 1
          done

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
      - name: Get dependencies
        run: go mod download
      - name: Run unit tests
        run: go test -v -short ./...

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
      - name: Get dependencies
        run: go mod download
      - name: Build binary for testing
        run: go build -o bin/mathreleaser-test ./cmd/mathreleaser
      - name: Run integration tests
        run: ./scripts/run-integration-tests.sh

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5'
      - name: Get dependencies
        run: go mod download
      - name: Run GoSec Security Scanner
        run: |
          go install github.com/securego/gosec/v2/cmd/gosec@latest
          gosec -no-fail ./...
          gosec -fmt=sarif -out=gosec.sarif ./... || echo "::warning::Security issues found, but continuing pipeline"
      - name: Upload GoSec scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          GOVERSION=go1.24.5 govulncheck ./... || echo "::warning::Vulnerabilities found, but continuing pipeline"

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: go
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
