# This GitHub action can publish assets for release when a tag is created.
# Currently its setup to run on any tag that matches the pattern "v*" (ie. v0.1.0).
#
# This uses an action (hashicorp/ghaction-import-gpg) that assumes you set your 
# private key in the `GPG_PRIVATE_KEY` secret and passphrase in the `PASSPHRASE`
# secret. If you would rather own your own GPG handling, please fork this action
# or use an alternative one for key handling.
#
# You will need to pass the `--batch` flag to `gpg` in your signing step 
# in `goreleaser` to indicate this is being used in a non-interactive mode.
#
name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Get tag name
        id: tag
        run: echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Check if custom release notes exist
        id: check_notes
        run: |
          FILE="release-notes/${{ steps.tag.outputs.tag }}/GITHUB_RELEASE.md"
          if [ -f "$FILE" ]; then
            echo "file_exists=true" >> $GITHUB_OUTPUT
            echo "file_path=$FILE" >> $GITHUB_OUTPUT
          else
            echo "file_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6.4.0
        with:
          version: "~> v2"
          args: release --clean ${{ steps.check_notes.outputs.file_exists == 'true' && format('--release-notes {0}', steps.check_notes.outputs.file_path) || '' }}
        env:
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive Changelog Entries
        run: |
          echo "Archiving changelog entries for ${{ steps.tag.outputs.tag }}"
          ./scripts/archive-changelog.sh "${{ steps.tag.outputs.tag }}"

      - name: Commit Archive Changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .changelog/archive
          git add -u .changelog
          git commit -m "Archive changelog entries for ${{ steps.tag.outputs.tag }}" || echo "No changes to commit"
          git push origin HEAD:main
