name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.22'
      
      - name: Get dependencies
        run: go mod download
      
      - name: Build all platforms
        run: make build-all
      
      - name: Generate checksums
        run: |
          mkdir -p dist
          cp bin/* dist/
          cd dist && find . -type f -name "gorelease*" | xargs sha256sum > checksums.txt
      
      - name: Generate release notes
        run: |
          if [ -f "GITHUB_RELEASE_NOTES.md" ]; then
            cp GITHUB_RELEASE_NOTES.md dist/release-notes.md
          else
            echo "# Release ${GITHUB_REF#refs/tags/}" > dist/release-notes.md
          fi
      
      - name: Create release using GitHub CLI
        run: |
          echo "Creating release for tag ${GITHUB_REF#refs/tags/}"
          RELEASE_NOTES=$(cat dist/release-notes.md)
          # Use GitHub API to create a release
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{
              \"tag_name\": \"${GITHUB_REF#refs/tags/}\",
              \"name\": \"Release ${GITHUB_REF#refs/tags/}\",
              \"body\": $(echo "$RELEASE_NOTES" | jq -s -R .),
              \"draft\": false,
              \"prerelease\": false
            }" > release.json
          
          # Extract the upload URL from the response
          UPLOAD_URL=$(cat release.json | jq -r .upload_url | sed 's/{?name,label}//')
          
          # Upload all files in the dist directory
          for file in dist/*; do
            echo "Uploading $file"
            filename=$(basename "$file")
            
            # Determine content type
            if [[ "$filename" == *.txt ]]; then
              content_type="text/plain"
            elif [[ "$filename" == *.md ]]; then
              content_type="text/markdown"
            else
              content_type="application/octet-stream"
            fi
            
            curl \
              -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: $content_type" \
              --data-binary @"$file" \
              "${UPLOAD_URL}?name=${filename}"
          done
